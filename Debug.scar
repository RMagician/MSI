{==============================================================================\
|                         MSI Group Scripting Include                          |
|                                 Debug.scar                                   |
|==============================================================================|
| For all debugging and progress report routines                               |
|                                                                              |
| * procedure MSI_Debug();                           * by Rasta Magician       |
| * procedure MSI_AddToProggy();                     * by The MSI Team         |
| * function MSI_SkillActions(): TStringArray;       * by The MSI Team         |
| * procedure MSI_GetReportInfo();                   * by Coh3n                |
| * function MSI_ObjToText(): String;                * by The MSI Team         |
| * function MSI_LocToText(): String;                * by The MSI Team         |
| * function MSI_GroupDigits(): String;              * PriSoner and Nava2      |
| * function MSI_AddToBoxes;                         * by Naum                 |
| * function MSI_SaveReport;                         * by Naum                 |
| * procedure MSI_ProgressReport();                  * by Coh3n                |
 \_____________________________________________________________________________}
 

{******************************************************************************}
{ procedure MSI_Debug(ProcName, TheMessage: string; DebugLevel:integer);       }
{ By: Rasta Magician                                                           }
{ Description: Used for Debugging. Will debug to DebugBox if                   }
{              DebugLevel >= Debug_LevelToDebug                                }
{******************************************************************************}
procedure MSI_Debug(ProcName, TheMessage: string; DebugLevel:integer);
var
  DebugMSG: string;
begin
  if DebugLevel < Debug_LevelToDebug then exit;
  DebugMSG := TheTime+': ';

  try
    DebugMSG := DebugMSG + Players[CurrentPlayer].Name+': ';
  except end;
  
  case DebugLevel of
    //to add some more detail
    DEBUG_PLAYER_ACTIONS: DebugMSG := DebugMSG + 'Player Action: ';
    DEBUG_FUNCTIONS     : DebugMSG := DebugMSG + 'Entering Func: ';
    DEBUG_SMALL_DETAILS : DebugMSG := DebugMSG + 'Detail: ';
  end;
  
  DebugMSG := DebugMSG + ProcName + ': ';
  DebugMSG := DebugMSG + TheMessage;
  writeln(DebugMSG);
end;

{******************************************************************************}
{ procedure MSI_AddToProggy(item, quantity, which: Integer);                   }
{ By: The MSI Team                                                             }
{ Description: Adds specified element to the progress report - if parameter    }
{              is unused, set to -1                                            }
{******************************************************************************}
const
  ADD_EXP   = 0;
  ADD_ITEMS = 1;
  ADD_LOADS = 2;
procedure MSI_AddToProggy(item, quantity, which: Integer);
begin
  if (quantity = 0) then
    Exit;

  case which of
    ADD_EXP: IncEx(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].TotalEXP, quantity);
    ADD_ITEMS: IncEx(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].ObjQuants[item], quantity);
    ADD_LOADS: Inc(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].TotalLoads);
  end;
end;

{******************************************************************************}
{ function MSI_SkillActions(what: variant): TStringArray;                      }
{ By: The MSI Team                                                             }
{ Description: Gets an array of skill actions                                  }
{******************************************************************************}
function MSI_SkillActions(what: variant): TStringArray;
begin
  case what of
{
    SKILL_ATTACK        : Result := ['Attack', 'Attacked'];
    SKILL_STRENGTH      : Result := ['Stength', 'Strengthed'];
    SKILL_DEFENSE       : Result := ['Defence', 'Defended'];
    SKILL_RANGE         : Result := ['Range', 'Ranged'];
    SKILL_PRAYER        : Result := ['Prayer', 'Prayed'];
    SKILL_MAGE          : Result := ['Magic', 'Maged'];
    SKILL_RUNECRAFTING  : Result := ['Runecrafting', 'RuneCrafted'];
    SKILL_HP            : Result := ['Hitpoints', 'HPed'];
    SKILL_AGILITY       : Result := ['Agility', 'Agilised'];
    SKILL_HERBLORE      : Result := ['Herblore', 'Herblored'];
    SKILL_THIEVING      : Result := ['Thieving', 'Thieved'];
    SKILL_CRAFTING      : Result := ['Crafting', 'Crafted'];
    SKILL_FLETCHING     : Result := ['Flecthing', 'Flecthed'];
    SKILL_SLAYER        : Result := ['Slayer', 'Slayed'];
    SKILL_MINING        : Result := ['Mining', 'Mined'];
    SKILL_SMITHING      : Result := ['Smithing', 'Smithed'];
    SKILL_FISHING       : Result := ['Fishing', 'Fished'];
    SKILL_COOKING       : Result := ['Cooking', 'Cooked'];
    SKILL_FIREMAKING    : Result := ['Firemaking', 'Burned'];
}
    SKILL_WOODCUTTING   : Result := ['Woodcutting', 'Chopped'];
{
    SKILL_FARMING       : Result := ['Farming', 'Farmed'];
    SKILL_CONSTRUCTION  : Result := ['Construction', 'Constructed'];
    SKILL_HUNTER        : Result := ['Hunter', 'Hunted'];
    SKILL_SUMMONING     : Result := ['Summoning', 'Summoned'];
}
  end;
end;

{******************************************************************************}
{ procedure MSI_GetReportInfo;                                                 }
{ By: Coh3n                                                                    }
{ Description: Gets the necessary proggy info that ISN'T reset during runtime  }
{******************************************************************************}
procedure MSI_GetReportInfo;
var
  i, level: Integer;
  skills: TVariantArray;
  theSkill: TStringArray;
begin
  { Gets the levels of each skill in the Players array }
  skills := PlayerSkills[CurrentPlayer];
  for i := 0 to High(skills) do
  begin
    theSkill := MSI_SkillActions(skills[i]);
    level := GetSkillLevel(theSkill[0]);
    ProgressReportArray[CurrentPlayer].SkillInfo[i].Level := level;
  end;
  
  { Gets the player's location }
  ProgressReportArray[CurrentPlayer].PlayerLoc := Players[CurrentPlayer].Integers[P_LOC];
  { Gets teh player's activity }
  ProgressReportArray[CurrentPlayer].PlayerStatus := Players[CurrentPlayer].Active;
end;

{******************************************************************************}
{ function MSI_ObjToText(Skill, WhatItem: variant): TStringArray;              }
{ By: The MSI Team                                                             }
{ Description: Gets the necessary proggy info that ISN'T reset during runtime  }
{******************************************************************************}
function MSI_ObjToText(which: Integer): TStringArray;
begin
  case which of
    LOGS_NORMAL:
      Result := ['Normal logs'];
      
    LOGS_OAK:
      Result := ['Oak logs'];
        
    else
      MSI_Debug('MSI_ObjToText', 'Invalid objet!', DEBUG_FUNCTIONS);
  end;
end;

{******************************************************************************}
{ function MSI_LocToText(Which: Integer): string;                              }
{ By: The MSI Team                                                             }
{ Description: Converts the location constant to a string                      }
{******************************************************************************}
function MSI_LocToText(Which: Integer): string;
begin
  case Which of
    LOC_LOST:
      Result := 'Lost';
      
    LOC_VE_BANK:
      Result := 'Varrock east bank';
      
    LOC_VE_TREES:
      Result := 'Varrock east trees';
      
    LOC_IN_RANDOM:
      Result := 'In random';
      
    CITY_VARROCK:
      Result := 'Varrock';
      
    else
      MSI_Debug('MSI_LocToText', 'Invalid location!', debug_Functions);
  end;
end;


{******************************************************************************}
{ function MSI_GroupDigits(n: integer; token: String): String;                 }
{ By: PriSoner and Nava2                                                       }
{ Description: Formats an integer into groups of 3 seperated by `token' and    }
{              returns a formatted string (i.e 1234567 would become 1,234,567) }
{******************************************************************************}
function MSI_GroupDigits(n: integer; token: String): String;
var
  b: integer;
begin
  Result := IntToStr(n);
  b := length(Result) + 1;
  if b > 3 then
  repeat
    b := b - 3;
    if b > 1 then
      insert(token, Result, b);
  until (b < 3);
end;

{******************************************************************************}
{ procedure MSI_AddToBoxes(S : String);                                        }
{ By: Naum                                                                     }
{ Description: Prints the string in the report and debug box                   }
{******************************************************************************}
Procedure MSI_AddToBoxes(S : String);
Begin
  AddToReport(S);
  WriteLn(S);
End;

{******************************************************************************}
{ Procedure MSI_SaveReport;                                                    }
{ By: Naum                                                                     }
{ Description: Saves the report in the MSI Progress Reports folder             }
{******************************************************************************}
Procedure MSI_SaveReport;
Var FileH : Integer;
    Path, Debug, FileS : String;
Begin
  Path := AppPath+'Includes\SRL\SRL\MSI\MSI Progress Reports\';
  WriteLn(Path);
  FileS := Copy(TheTime, 1, Pos('PM', TheTime) - 2);
  FileS := Replace(FileS, ':', '-');
  WriteLn(FileS);
  FileH := ReWriteFile(Path + FileS + ' ' + TheDate(Date_Formal) + '.txt', False);
  WriteLn(Path + FileS + ' ' + TheDate(Date_Formal));
  Debug := Copy(GetDebugText, (LastPos('MSI Extreme', GetDebugText) - 88),
           iAbs((LastPos('}', GetDebugText)+1) - (LastPos('MSI Extreme', GetDebugText) - 88)));
  FileS := Debug;
  WriteFileString(FileH, 'Progress Report Saved:'+#13+#10);
  WriteFileString(FileH, #13+#10+'This proggie was written '+TheTime+' at '+TheDate(Date_Formal)+#13+#10);
  WriteFileString(FileH, FileS);
  CloseFile(FileH);
End;


{******************************************************************************}
{ procedure MSI_ProgressReport;                                                }
{ By: Coh3n                                                                    }
{ Description: Prints the progress report of each player                       }
{******************************************************************************}
function MSI_GetItemList(whichPlayer, whichSkill: Integer): TIntegerArray; forward;
procedure MSI_ProgressReport;
var
  i, j, k: integer;
  skill, item: TStringArray;
  intItems: TIntegerArray;
begin
  ClearReport;
  MSI_GetReportInfo;
  MSI_AddToBoxes('{----------------------------------------------------------------}');                   //64 from '{' to '}'
  MSI_AddToBoxes('{                   MSI Extreme Player Report                    }');
  MSI_AddToBoxes('{----------------------------------------------------------------}');
  MSI_AddToBoxes('{     ' + PadR('Time Running: ' + TimeRunning, 59) + '}');
  MSI_AddToBoxes('{----------------------------------------------------------------}');
  
  for i := 0 to (HowManyPlayers - 1) do
    with ProgressReportArray[i] do
    begin
      MSI_AddToBoxes('{                                                                }');
      //              {     Player 0: Player Name                                      }
      MSI_AddToBoxes('{     ' + PadR('Player ' + IntToStr(i) + ': ' + Capitalize(PlayerName), 59) + '}');       //PlayerName
      //              {     City: Varrock                                              }
      MSI_AddToBoxes('{     ' + PadR('City: ' + MSI_LocToText(PlayerCity), 59) + '}');                          //PlayerCity
      //              {     Location: VE_Trees                                         }
      MSI_AddToBoxes('{     ' + PadR('Location: ' + MSI_LocToText(PlayerLoc), 59) + '}');                       //PlayerLoc
      //              {     Time: 02h, 33m, 45s                                         }
      MSI_AddToBoxes('{     ' + PadR('Time: ' + MsToTime(PlayerTime, Time_Short), 59) + '}');                   //TotalTime
      //              {     Active: True                                               }
      MSI_AddToBoxes('{     ' + PadR('Active: ' + Capitalize(BoolToStr(PlayerStatus)), 59) + '}');              //PlayerStatus
      if (not PlayerStatus) then
        //              {       Reason: Failed to bank items                             }                      //FalseReason
        MSI_AddToBoxes('{       ' + PadR('Reason: ' + FalseReason, 57) + '}');
      MSI_AddToBoxes('{                                                                }');

      for j := 0 to High(SkillInfo) do                                                                          //SkillInfo
        with SkillInfo[j] do
        begin
          skill := MSI_SkillActions(PlayerSkills[CurrentPlayer][j]);
          //              {     Skill: Woodcutting                                         }
          MSI_AddToBoxes('{     ' + PadR('Skill: ' + skill[0], 59) + '}');
          //              {       Skill Time: 02h, 45m, 33s                                }
          MSI_AddToBoxes('{       ' + PadR('Time: ' + MsToTime(TotalTime, Time_Short), 57) + '}');              //TotalTime
          //              {       Loads: 45                                                }
          MSI_AddToBoxes('{       ' + PadR('Loads: ' + IntToStr(TotalLoads), 57) + '}');                        //TotalLoads
          //              {       Experience: 38,650                                       }
          MSI_AddToBoxes('{       ' + PadR('Experience: ' + MSI_GroupDigits(Round(TotalEXP), ','), 57) + '}');  //TotalEXP
          //              {       Level: 91                                                }
          if (Level < 1) then
            MSI_AddToBoxes('{       ' + PadR('Level: Not yet defined', 57) + '}')
          else
            MSI_AddToBoxes('{       ' + PadR('Level: ' + IntToStr(Level), 57) + '}');                           //Level

          intItems := MSI_GetItemList(i, j);
          for k := 0 to High(intItems) do                                                                       //TotalObj
          begin
            item := MSI_ObjToText(intItems[k]);
            //              {         Item: Normal logs                                      }
            MSI_AddToBoxes('{         ' + PadR('Item: ' + item[0], 55) + '}');
            //              {         Amount: 1,546                                          }
            MSI_AddToBoxes('{         ' + PadR('Amount: ' + MSI_GroupDigits(ObjQuants[k], ','), 55) + '}');     //ObjQuants
          end;
          
          MSI_AddToBoxes('{                                                                }');
          MSI_AddToBoxes('{----------------------------------------------------------------}');
        end;
    end;
  
  MSI_AddToBoxes('{----------------------------------------------------------------}');
  //MSI_SaveReport; //Disabled for now until we can fix. :p
end;