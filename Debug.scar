{==============================================================================\
|                         MSI Group Scripting Include                          |
|                                 Debug.scar                                   |
|==============================================================================|
| For all debugging and progress report routines                               |
|                                                                              |
| Procedure MSIDebug(ProcName, TheMessage: string; DebugLevel:integer); by: Rasta Magician
 \_____________________________________________________________________________}
 

{******************************************************************************}
{ Procedure MSI_Debug(ProcName, TheMessage: string; DebugLevel:integer);       }
{ By: Rasta Magician                                                           }
{ Rev: 10                                                                      }
{ Date: 13 Sep 09                                                              }
{ Description: Used for Debugging. Will debug to DebugBox if                   }
{                DebugLevel >= Debug_LevelToDebug                              }
{******************************************************************************}
Procedure MSI_Debug(ProcName, TheMessage: string; DebugLevel:integer);
var
  DebugMSG: string;
begin
  if DebugLevel < Debug_LevelToDebug then exit;
  DebugMSG := TheTime+': ';

  try
    DebugMSG := DebugMSG + Players[CurrentPlayer].Name+': ';
  except end;
  
  case DebugLevel of
    //to add some more detail
    DEBUG_PLAYER_ACTIONS: DebugMSG := DebugMSG + 'Player Action: ';
    DEBUG_FUNCTIONS     : DebugMSG := DebugMSG + 'Entering Func: ';
    DEBUG_SMALL_DETAILS : DebugMSG := DebugMSG + 'Detail: ';
  end;
  
  DebugMSG := DebugMSG + ProcName + ': ';
  DebugMSG := DebugMSG + TheMessage;
  writeln(DebugMSG);
end;

{******************************************************************************}
{ procedure AddToProggy(item, quantity, which: Integer);                       }
{ By: The MSI Team                                                             }
{ Description: Adds specified element to the progress report - if parameter    }
{              is unused, set to -1                                            }
{******************************************************************************}
const
  ADD_EXP   = 0;
  ADD_ITEMS = 1;
  ADD_LOADS = 2;
  
procedure AddToProggy(item, quantity, which: Integer);
begin
  if (quantity = 0) then
    Exit;

  case which of
    ADD_EXP: IncEx(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].TotalEXP, quantity);
    ADD_ITEMS: IncEx(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].ObjQuants[item], quantity);
    ADD_LOADS: Inc(ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].TotalLoads);
  end;
end;

Function SkillTextArray(what: variant): TStringArray;
begin
  case what of
    Skill_Attack        : Result := ['Attack', 'Attacked'];
    Skill_Strength      : Result := ['Stength', 'Strengthed'];
    Skill_Defense       : Result := ['Defence', 'Defended'];
    Skill_Range         : Result := ['Range', 'Ranged'];
    Skill_Prayer        : Result := ['Prayer', 'Prayed'];
    Skill_Mage          : Result := ['Magic', 'Maged'];
    Skill_RuneCrafting  : Result := ['Runecrafting', 'RuneCrafted'];
    Skill_HP            : Result := ['Hitpoints', 'HPed'];
    Skill_Agility       : Result := ['Agility', 'Agilised'];
    Skill_Herblore      : Result := ['Herblore', 'Herblored'];
    Skill_Thieving      : Result := ['Thieving', 'Thieved'];
    Skill_Crafting      : Result := ['Crafting', 'Crafted'];
    Skill_Fletching     : Result := ['Flecthing', 'Flecthed'];
    Skill_Slayer        : Result := ['Slayer', 'Slayed'];
    Skill_Mining        : Result := ['Mining', 'Mined'];
    Skill_Smithing      : Result := ['Smithing', 'Smithed'];
    Skill_Fishing       : Result := ['Fishing', 'Fished'];
    Skill_Cooking       : Result := ['Cooking', 'Cooked'];
    Skill_FireMaking    : Result := ['Firemaking', 'Burned'];
    Skill_WoodCutting   : Result := ['Woodcutting', 'Chopped'];
    Skill_Farming       : Result := ['Farming', 'Farmed'];
    Skill_Construction  : Result := ['Construction', 'Constructed'];
    Skill_Hunter        : Result := ['Hunter', 'Hunted'];
    Skill_Summoning     : Result := ['Summoning', 'Summoned'];
  end;
end;

{******************************************************************************}
{ procedure GetReportInfo;                                                     }
{ By: Coh3n                                                                    }
{ Description: Gets the necessary proggy info that ISN'T reset during runtime  }
{******************************************************************************}
procedure GetReportInfo;
var
  i, level: Integer;
  skills: TVariantArray;
  theSkill: TStringArray;
begin
  { Gets the levels of each skill in the Players array }
  skills := PlayerSkills[CurrentPlayer];
  for i := 0 to High(skills) do
  begin
    theSkill := SkillTextArray(skills[i]);
    level := GetSkillLevel(theSkill[0]);
    ProgressReportArray[CurrentPlayer].SkillInfo[i].Level := level;
  end;
  
  { Gets the player's location }
  ProgressReportArray[CurrentPlayer].PlayerLoc := Players[CurrentPlayer].Integers[P_LOC];
  { Gets teh player's activity }
  ProgressReportArray[CurrentPlayer].PlayerStatus := Players[CurrentPlayer].Active;
end;

Function ObjTextArray(Skill, WhatItem: variant): TStringArray;
begin
  case Skill of
    Skill_Attack        :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Strength      :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Defense       :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Range         :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Prayer        :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Mage          :
      case WhatItem of
        0: Result := [];
      end;
    Skill_RuneCrafting  :
      case WhatItem of
        0: Result := [];
      end;
    Skill_HP           :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Agility       :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Herblore      :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Thieving      :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Crafting      :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Fletching     :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Slayer        :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Mining        :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Smithing      :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Fishing       :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Cooking       :
      case WhatItem of
        0: Result := [];
      end;
    Skill_FireMaking    :
      case WhatItem of
        0: Result := [];
      end;
    Skill_WoodCutting   :
      case WhatItem of
        LOGS_NORMAL: Result := ['Normal logs'];
        LOGS_OAK: Result := ['Oak logs'];
      end;
    Skill_Farming       :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Construction  :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Hunter        :
      case WhatItem of
        0: Result := [];
      end;
    Skill_Summoning     :
      case WhatItem of
        0: Result := [];
      end;
  end;
end;

Function LocToText(Which: Integer): string;
begin
  case Which of
    LOC_LOST:
      Result := 'Lost';
      
    LOC_VE_BANK:
      Result := 'Varrock east bank';
      
    LOC_VE_TREES:
      Result := 'Varrock east trees';
      
    LOC_IN_RANDOM:
      Result := 'In random';
      
    CITY_VARROCK:
      Result := 'Varrock';
      
    else
      MSI_Debug('LocToText', 'Invalid location!', debug_Functions);
  end;
end;


{******************************************************************************}
{ function GroupDigits(n: integer; token: String): String;                     }
{ By: PriSoner and Nava2                                                       }
{ Description: Formats an integer into groups of 3 seperated by `token' and    }
{              returns a formatted string (i.e 1234567 would become 1,234,567) }
{******************************************************************************}
function GroupDigits(n: integer; token: String): String;
var
  b: integer;
begin
  Result := IntToStr(n);
  b := length(Result) + 1;
  if b > 3 then
  repeat
    b := b - 3;
    if b > 1 then
      insert(token, Result, b);
  until (b < 3);
end;

{******************************************************************************}
{ procedure ProgressReport;                                                    }
{ By: Coh3n                                                                    }
{ Description: Prints the progress report of each player                       }
{******************************************************************************}
function MSI_GetItemList(whichPlayer, whichSkill: Integer): TIntegerArray; forward;
procedure ProgressReport;
var
  i, j, k: integer;
  skill, item: TStringArray;
  intItems: TIntegerArray;
begin
  ClearReport;
  GetReportInfo;
  AddToReport('{----------------------------------------------------------------}');
  AddToReport('{                   MSI Extreme Player Report                    }');
  AddToReport('{----------------------------------------------------------------}'); //64 from '{' to '}'
  AddToReport('{     ' + PadR('Time Running: ' + TimeRunning, 59) + '}');
  AddToReport('{----------------------------------------------------------------}');
  
  for i := 0 to (HowManyPlayers - 1) do
    with ProgressReportArray[i] do
    begin
      AddToReport('{                                                                }');
      //           {     Player 0: Player Name                                      }
      AddToReport('{     ' + PadR('Player ' + IntToStr(i) + ': ' + Capitalize(PlayerName), 59) + '}'); //PlayerName
      //           {     City: Varrock                                              }
      AddToReport('{     ' + PadR('City: ' + LocToText(PlayerCity), 59) + '}');                        //PlayerCity
      //           {     Location: VE_Trees                                         }
      AddToReport('{     ' + PadR('Location: ' + LocToText(PlayerLoc), 59) + '}');                     //PlayerLoc
      //           {     Active: True                                               }
      AddToReport('{     ' + PadR('Active: ' + Capitalize(BoolToStr(PlayerStatus)), 59) + '}');        //PlayerStatus
      if (not PlayerStatus) then
        //           {       Reason: Failed to bank items                             }                //FalseReason
        AddToReport('{       ' + PadR('Reason: ' + FalseReason, 57) + '}');
      AddToReport('{                                                                }');

      for j := 0 to High(SkillInfo) do                                                               //SkillInfo
        with SkillInfo[j] do
        begin
          skill := SkillTextArray(PlayerSkills[CurrentPlayer][j]);
          //           {     Skill: Woodcutting                                         }
          AddToReport('{     ' + PadR('Skill: ' + skill[0], 59) + '}');
          //           {       Loads: 45                                                }
          AddToReport('{       ' + PadR('Loads: ' + IntToStr(TotalLoads), 57) + '}');                    //TotalLoads
          //           {       Experience: 38,650                                       }
          AddToReport('{       ' + PadR('Experience: ' + GroupDigits(Round(TotalEXP), ','), 57) + '}');  //TotalEXP
          //           {       Level: 91                                                }
          AddToReport('{       ' + PadR('Level: ' + IntToStr(Level), 57) + '}');                         //Level

          intItems := MSI_GetItemList(i, j);
          for k := 0 to High(intItems) do                                                            //TotalObj
          begin
            item := ObjTextArray(PlayerSkills[CurrentPlayer][j], intItems[k]);
            //           {         Item: Normal logs                                      }
            AddToReport('{         ' + PadR('Item: ' + item[0], 55) + '}');
            //           {         Amount: 1,546                                          }
            AddToReport('{         ' + PadR('Amount: ' + GroupDigits(ObjQuants[k], ','), 55) + '}');     //ObjQuants
          end;
          
          AddToReport('{                                                                }');
          AddToReport('{----------------------------------------------------------------}');
        end;
    end;
  
  AddToReport('{----------------------------------------------------------------}');
end;