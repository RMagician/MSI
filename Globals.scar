{==============================================================================\
|                         MSI Group Scripting Include                          |
|                               Globals.scar                                   |
|==============================================================================|
| Used to store all necessary global types, consts and vars                    |
|                                                                              |
 \_____________________________________________________________________________}

const
  MSI_VERSION_NUMBER = '1.0';

{
  Abbreviations:
    - FS: Fishing Spot
    - GS: General Store
    - GE: Grand Exchange
    - VE: Varrock East
    - VW: Varrock West
    - FW: Falador West
    - FE: Falador East
    - CG: Castle Guards
    - DW: Dark Wizards
    - V: Volcan
    - SO: Stronghold Of *
    - AK: Al Kharid
    - SW: Spinning Wheel
    - LB: Lumby
    - EV: EdgeVille
    - BV: Barbarian Village
}

{ Debug constants
  Description: The several debugging levels, so the user receives as much
               detail as he wishes to receive. }
const
  DEBUG_FORCE          = 10;  // For MSI SLs to force it to be debuged, not for Script Users!
  DEBUG_PROGGIE        = 7;   // Only debug proggie and more important things
  DEBUG_PLAYER_ACTIONS = 5;   // Only debug proggie, Player Actions and more important things
  DEBUG_FUNCTIONS      = 3;   // Debug the at the start of each function, Player Actions, Proggie and +
  DEBUG_SMALL_DETAILS  = 1;   // Debug small details and more important
  DEBUG_EVERYTHING     = 0;   // For Script Users to have everything in debug box.

{ const Other
  Description: Represents miscellaneous constants }
const
  STATS_LINK      = 'http://scriptmanager.freehostia.com/submit.php'; //for stats
  WALK_TOL        = 8;  //the tolerance for a color point compared to a reflection point
  ANTI_BAN_CHANCE = 10; //the chance (in %) of antiban

{ const Stats
  Description: Represents all the custom variables to add to the stats }
const
  STATS_LOGINS  = 1;
  STATS_BANKS   = 2;
  STATS_LOADS   = 3;
  STATS_RANDOMS = 4;
  STATS_LEVELS  = 5;
  STATS_EXP     = 6;
  STATS_LOGS    = 7;
  STATS_ORES    = 8;

{ const Players
  Constants representing the different Players array records. }
const
  // Integers
  P_LOC  = 0;
  P_CITY = 1;

  // Booleans
  P_BANK = 0;

{ const Location Constants
  Description: Constants used to represent player locations }
const
  LOC_POWER_SKILL = 0;
  LOC_LOST        = 1;
  LOC_VE_TREES    = 2;
  LOC_VE_BANK     = 3;
  LOC_IN_RANDOM   = 4;

  CITY_VARROCK = 5;

{ const AutoColor indexes
  Description: Constants used for the autocolor indexes }
const
  AC_ROAD_VARROCK = 0;

{ const AutoColor
  Description: Constants used for autocoloring the minimap }
const
  COLOR_ROAD_GENERAL = 6579821;
  COLOR_ROAD_VARROCK = 8686729;
  COLOR_ROAD_FALLY   = 7831173;
  COLOR_ROAD_LUMBY   = 8225677;
  COLOR_ROAD_DIRT    = 1853272;
  COLOR_BANKER       = 1179390;
  COLOR_WATER        = 10850700;
  COLOR_ROCK         = 5789528;
  COLOR_SAND         = 0;
  COLOR_TREE         = 1532978;

{ const Walking
  Description: Constants representing the color walking points }
const
  WALK_WC_VE_TREE_1 = 0; // rock
  WALK_WC_VE_TREE_2 = 1; // road
  WALK_WC_VE_TREE_3 = 2; // path
  WALK_WC_VE_TREE_4 = 3; // final

  WALK_WC_VE_BANK_1 = 4; // rock
  WALK_WC_VE_BANK_2 = 5; // path
  WALK_WC_VE_BANK_3 = 6; // road
  WALK_WC_VE_BANK_4 = 7; // final

{ const Hatchet/Pickaze requirements.
  Constants representing the requirements to use each tool }
const
  //hatchets and pickaxes
  REQ_BRONZE    = 1;
  REQ_IRON      = 1;
  REQ_STEEL     = 6;
  REQ_MITHRIL   = 21;
  REQ_ADAMANT   = 31;
  REQ_RUNE      = 41;
  REQ_MAX_LEVEL = 99;

{ const Item Info
  Description: Constants representing all the items used in MSI. }
const
  MSI_ITEM_COUNT = 18;  //change this to the number of items in ItemInfo.scar
{
  CAVADA_BERRIES = 0; //Test

  PICKAXE_BRONZE  = 1;
  PICKAXE_IRON    = 2;
  PICKAXE_STEEL   = 3;
  PICKAXE_MITHRIL = 4;
  PICKAXE_ADAMANT = 5;
  PICKAXE_RUNE    = 6;
}

  HATCHET_BRONZE  = 7;
  HATCHET_IRON    = 8;
  HATCHET_STEEL   = 9;
  HATCHET_MITHRIL = 10;
  HATCHET_ADAMANT = 11;
  HATCHET_RUNE    = 12;

  LOGS_NORMAL = 13;
  LOGS_OAK    = 14;
  LOGS_WILLOW = 15;
  LOGS_MAPLE  = 16;
  LOGS_YEW    = 17;

{ const Objects
  Description: Constants representing all the main screen objects used in MSI }
const
  OBJ_TREE_NORMAL = 0;
  OBJ_TREE_OAK    = 1;
  OBJ_TREE_WILLOW = 2;
  OBJ_TREE_MAPLE  = 3;
  OBJ_TREE_YEW    = 4;
  OBJ_TREE_MAGIC  = 5;

{
  OBJ_ROCK_CLAY   = 4;
  OBJ_ROCK_TIN    = 5;
  OBJ_ROCK_COPPER = 6;
  OBJ_ROCK_IRON   = 7;
  OBJ_ROCK_SILVER = 8;
}

  OBJ_BANK_VE = 9;


{ Type TMSObject
  Description: To be used for finding on the MS. Stores all necessary
               information. }
Type
  TMSObject = Record
    X, Y             : Integer;
    Name             : String;
    UpText           : String;
    Option           : String;
    Exp              : Extended;
    Colors           : TIntegerArray;
    FindAllColors    : Boolean; // Result False if not ALL colors are found
    Tol              : Integer;
    Hue              : Extended;
    Sat              : Extended;
    W, H             : Integer;
    Accuracy         : Integer; // Min pixels to be found
    ExcludeSelf      : Boolean; // Exclude pixels in a box, the box might need revamping / making it dynamic
    RightClickOnly   : Boolean;
    Tries            : Integer;
    Anim             : Boolean; // Result False if not animating
    WaitToMove       : Boolean; // When ClickLeft, wait till we have stopped moving?
    BadColors        : TIntegerArray;
    BadColorTolerance: Integer;
  End;
  TMSObjectArray = Array of TMSObject;
  
{ Type TItem
  Description: To be used for handling Items in all situations. }
  TItem = Record
    Name      : String;
    UpText    : TStringArray;
    ItemP     : TPoint;
    Stackable : Boolean;
    Colors    : TIntegerArray;
    Tol       : Integer;
    DTM       : Integer;
    BMP       : Integer;
  End;
  
  //Used in Banking.Scar
  Type MSI_TItemArray = Array Of TItem;

{ Type TMMLocation
  Description: Stores all needed colorwalking information. }
  TMMLocation = Record
    Symbol     : String;
    DTM        : Integer;
    W, H       : Integer;
    Colors     : TIntegerArray;
    Tolerances : TIntegerArray;
    Counts     : TIntegerArray;
  End;

{ Type TPlayerSkillInfo
  Description: Stores information for one player for one skill. }
  TPlayerSkillInfo = record
    TotalTime  : integer;
    TotalObj   : integer;
    TotalLoads : integer;
    Level      : integer;
    TotalEXP   : integer;
    ObjQuants  : array of integer;
  end;

{ Type TProggy
  Description: Stores information all progress related information for one
               player.  }
  TProggy = record
    PlayerName  : string;
    PlayerStatus: boolean;
    FalseReason : string;
    PlayerRandom: string;
    PlayerCity  : integer;
    PlayerLoc   : integer;
    PlayerTime  : integer;
    SkillInfo   : array of TPlayerSkillInfo;
  end;

var
  //Description: To be used to store information for Players individually
  ProgressReportArray: Array of TProggy;
  
  //Used like CurrentPlayer, but for the skills in the player array
  CurrentSkill: Integer;
  
  //Description: For script user to choose how much to debug
  Debug_LevelToDebug: integer;
  
  //Used in the DeclarePlayers arrays for skills and objects
  PlayerSkills: Array of TVariantArray;
  PlayerObjects: Array of Array of TVariantArray;
  
  //Used for script setup (assinged to constatns in RunMe.scar)
  BreakAfter, BreakTime: Integer;
  
  //Used when loading items for MSI
  MSI_Item : Array[0..(MSI_ITEM_COUNT - 1)] Of TItem;
  
  //Used for saving the debug box
  scriptStart: String;

  //Used in the stats system
  Stats_UserID, Stats_Password, Stats_ScriptID: string;
  Stats_LastTime: Integer;
  Stats_CustomVars: array [1..20] of Integer;
  statsID, statsPass: String; //For compiling issues