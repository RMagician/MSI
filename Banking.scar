{==============================================================================\
|                         MSI Group Scripting Include                          |
|                               Banking.scar                                   |
|==============================================================================|
| All Banking related routines.                                                |
|                                                                              |
| * function MSI_OpenBank(): Boolean;       * by Coh3n                         |
| * function MSI_Deposit(): Boolean;        * by Naum                          |
| * function MSI_Withdraw(): Boolean;       * by Naum                          |
|                                                                              |
 \_____________________________________________________________________________}

  
{******************************************************************************}
{ function MSI_OpenBank(which, walkIndex: Integer; tPin: String): Boolean;     }
{ By: Coh3n                                                                    }
{ Description: Opens the bank 'which' (refer to bank constants). Will attempt  }
{              to relocate if bank isn't found after 15 tries.                 }
{******************************************************************************}
function MSI_WalkToColorIndex(index: Integer): Boolean; forward;
function MSI_OpenBank(which, walkIndex: Integer; tPin: String): Boolean;
var
  theBank: TMSObject;
  t, x, y: Integer;
begin
  if (not LoggedIn) then
    Exit;
    
  theBank := MSI_GetObject(which);
  t := 0;
  
  repeat
    Inc(t);
    if (MSI_FindObject(theBank, ClickRight)) then
    begin
      if (PinScreen) then
        if (Length(tPin) = 4) then
          InPin(tPin);

      Result := WaitFunc(@BankScreen, 200, 10000);
    end;
      
    if (t = 15) then
      if not (MSI_WalkToColorIndex(walkIndex)) then
      begin
        SymbolAccuracy := BANK_SYMBOL_ACCURACY;
        if (FindSymbol(x, y, 'bank')) then
        begin
          Mouse(x, y, 5, 5, True);
          FFlag(5);
          Wait(RandomRange(250, 750));
        end;
          
        SymbolAccuracy := 0.8;
      end;
  until(Result or (t >= 30));
  
  if (Result) then
    MSI_Debug('MSI_OpenBank', 'Successfuly opened bank: ' + theBank.Name, DEBUG_FUNCTIONS)
  else
    MSI_Debug('MSI_OpenBank', 'Failed to open bank - ' + theBank.Name, DEBUG_FUNCTIONS);
end;

{******************************************************************************}
{ Function MSI_Deposit(Items, Amount : TIntegerArray) : Boolean                }
{ By: Naum                                                                     }
{ Description: Deposits an Item using the TItem type. Set Amount to [] to      }
{              deposit all of every item                                       }
{******************************************************************************}
Function MSI_Deposit(Items, Amount: TIntegerArray) : Boolean;
Var ATPA2 : Array Of TPointArray;  //The length is the same as items.colors
    ATPA : T2DPointArray;
    I, BX, BY, II, DX, DY, XX, YY, Tol : Integer;
    BitmapCheck, TextCheck, DTMCheck : Boolean;
    TB : TBox;

Begin
  if (not LoggedIn) then
    Exit;
    
  if (Length(Amount) <= 0) then
  begin
    SetLength(Amount, Length(Items));
    for i := 0 to High(Amount) do
      Amount[i] := 28;
  end;

  If Not WaitFunc(@BankScreen, 70, 1300) Then  //Just in case
    Exit
  Else begin
    MSI_LoadItems(Items);
    For I := 0 To High(Items) Do
    Begin
      Tol := 0;
      Repeat
        BitmapCheck := FindBitmapToleranceIn(MSI_Item[Items[I]].BMP, BX, BY, MIX1, MIY1, MIX2, MIY2, Tol);
        IncEx(Tol, INC_TOL);
      Until(BitmapCheck) Or (Tol >= MAX_TOL);

      If Not BitmapCheck Then
      Begin
        SetArrayLength(ATPA2, High(MSI_Item[Items[I]].Colors)+1)

        For II := 0 To High(MSI_Item[Items[I]].Colors) Do
          FindColorsTolerance(ATPA2[II], MSI_Item[Items[I]].Colors[II], MIX1, MIY1, MIX2, MIY2, 15);

        ATPA2[0] := MergeATPA(ATPA2);
        ATPA := SplitTPA(ATPA2[0], 5);

        For II := 0 To High(ATPA) Do
        Begin
          TB := IntToBox(ATPA[II][0].x - 50, ATPA[II][0].y - 50,
                ATPA[II][0].x + 43, ATPA[II][0].y + 44);

          DTMCheck := DTMRotated(MSI_Item[Items[I]].DTM, DX, DY, TB.x1, TB.y1, TB.x2, TB.y2);
          MMouse(DX, DY, 2, 3);
          TextCheck := WaitUpTextMulti(MSI_Item[Items[I]].UpText, 150+Random(30));
          If TextCheck Then Break;
        End;
      End;

      If BitmapCheck Or TextCheck Then
      Begin
        If BX + BY > 0 Then
          MMouse(BX, BY, 2, 3);

        TextCheck := WaitUpTextMulti(MSI_Item[Items[I]].UpText, 1200);
        GetMousePos(XX, YY);
        Result := TextCheck;

        If Result Then
        Begin
          Mouse(XX, YY, 0, 0, False);

          If Amount[I] >= 28 Then
            Result := WaitOption('-All', 1200);

          If InIntArray([1, 5, 10], Amount[I]) Then
            Result := WaitOption('-'+IntToStr(Amount[I]), 1200)
          Else
          Begin
            If WaitOption('-X', 900) Then
             If WaitColor(254, 401, ClBlack, 0, 1200) Then
               TypeSend(IntToStr(Amount[I]));

               Result := True;
          End;

          If Result Then
            MSI_Debug('MSI_Deposit', 'Deposited Amount '+IntToStr(Amount[I])+
                      ' Of Item : ''' +MSI_Item[Items[I]].Name+'''', DEBUG_SMALL_DETAILS);
        End;
      End;
    End;
  end;
End;


{******************************************************************************}
{ Function MSI_Withdraw(Items, Amount : TIntegerArray) : Boolean               }
{ By: Naum                                                                     }
{ Description: Widthraws an Item using the TItem type                          }
{******************************************************************************}
Function MSI_Withdraw(Items, Amount : TIntegerArray) : Boolean;
Var ATPA2 : Array Of TPointArray;  //The length is the same as items.colors
    ATPA : T2DPointArray;
    I, BX, BY, II, DX, DY, XX, YY, Tol : Integer;
    BitmapCheck, TextCheck, DTMCheck : Boolean;
    WithdrawP : TPoint;
    TB : TBox;

Begin
  if (not LoggedIn) then
    Exit;

  If Not WaitFunc(@BankScreen, 70, 1300) Then  //Just in case
    Exit
  Else begin
    MSI_LoadItems(Items);
    For I := 0 To High(Items) Do
    Begin
      Tol := 0;
      Repeat
        BitmapCheck := FindBitmapToleranceIn(MSI_Item[Items[I]].BMP, BX, BY, MBX1, MBY1, MBX2, MBY2, Tol);
        IncEx(Tol, INC_TOL);
      Until(BitmapCheck) Or (Tol >= MAX_TOL);

      If Not BitmapCheck Then
      Begin
        SetArrayLength(ATPA2, High(MSI_Item[Items[I]].Colors)+1)

        For II := 0 To High(MSI_Item[Items[I]].Colors) Do
          FindColorsTolerance(ATPA2[II], MSI_Item[Items[I]].Colors[II], MBX1, MBY1, MBX2, MBY2, 15);

        ATPA2[0] := MergeATPA(ATPA2);
        ATPA := SplitTPA(ATPA2[0], 5);

        For II := 0 To High(ATPA) Do
        Begin
          TB := IntToBox(ATPA[II][0].x - 50, ATPA[II][0].y - 50,
                ATPA[II][0].x + 50, ATPA[II][0].y + 50);

          DTMCheck := DTMRotated(MSI_Item[Items[I]].DTM, DX, DY, TB.x1, TB.y1, TB.x2, TB.y2);
          MMouse(DX, DY, 2, 3);
          TextCheck := WaitUpTextMulti(MSI_Item[Items[I]].UpText, 150+Random(30));
          If TextCheck Then Break;
        End;
      End;

      If BitmapCheck Or TextCheck Then
      Begin
        If BX + BY > 0 Then
          MMouse(BX, BY, 2, 3);

        TextCheck := WaitUpTextMulti(MSI_Item[Items[I]].UpText, 1200);
        GetMousePos(XX, YY);
        Result := TextCheck;

        If Result Then
        Begin
          MSI_Item[Items[I]].ItemP := Point(XX, YY);
          WithDrawP := MSTPointToBankPoint(Point(XX, YY));
          Withdraw(WithDrawP.X, WithDrawP.Y, Amount[I]);
          MSI_Debug('MSI_Withdraw', 'Withdrew Amount '+IntToStr(Amount[I])+
                   ' Of Item : ''' +MSI_Item[Items[I]].Name+'''', DEBUG_SMALL_DETAILS);
        End;
      End;
    End;
  end;
End;
