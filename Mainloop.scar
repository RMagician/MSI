{==============================================================================\
|                         MSI Group Scripting Include                          |
|                                Mainloop.scar                                 |
|==============================================================================|
| For all the script Artificial Inteligence                                    |
|                                                                              |
| * function MSI_BestTool: Integer;                * by Coh3n                  |
| * function MSI_WorstTool: Integer;               * by Coh3n                  |
| * function MSI_SetupPlayer: Boolean;             * by Coh3n                  |
| * function MSI_GetObjectList: TIntegerArray;     * by Coh3n                  |
| * function MSI_WalkToLoc: Boolean;               * by The MSI Team           |
| * function MSI_WalkToBank: Boolean;              * by The MSI Team           |
| * function MSI_DoSkill: Boolean;                 * by The MSI Team           |
| * procedure MSI_CountItems: Boolean;             * by Coh3n                  |
| * function MSI_BankMaterials: Boolean;           * by The MSI Team           |
| * function MSI_MainLoop: Boolean;                * by The MSI Team           |
 \_____________________________________________________________________________}

{ const Hatchet/Pickaze requirements.
  Constants representing the requirements to use each pickaxe/hatchet. }
const
  REQ_BRONZE    = 1;
  REQ_IRON      = 1;
  REQ_STEEL     = 6;
  REQ_MITHRIL   = 21;
  REQ_ADAMANT   = 31;
  REQ_RUNE      = 41;
  REQ_MAX_LEVEL = 99;

{******************************************************************************}
{ function MSI_BestTool: Integer;                                              }
{ By: Coh3n                                                                    }
{ Rev: 55                                                                      }
{ Date: 26 Dec 09                                                              }
{ Description: Determines the best tool for the job at hand.                   }
{******************************************************************************}
function MSI_BestTool: Integer;
var
  skillsArr: TStringArray;
  currSkill, currLevel: Integer;
begin
  if (not Loggedin) then
    Exit;
    
  { In order for this to work properly, the skillsArr indexes must correspond
    to the skills constants in SRL's Players.scar }
  skillsArr := [ 'attack', 'strength', 'defence', 'range', 'prayer', 'magic',
                 'runecrafting', 'hitpoints', 'agility', 'herblore', 'thieving',
                 'crafting', 'fletching', 'slayer', 'mining', 'smithing',
                 'fishing', 'cooking', 'firemaking', 'woodcutting', 'farming',
                 'construction', 'hunting', 'summoning' ];

  { Get the current level of the chosen skill, and then look for the required
    tool, starting with the best one for that player's skill level. }
  currSkill := PlayerSkills[CurrentPlayer][CurrentSkill] - 1;
  currLevel := GetSkillLevel(skillsArr[currSkill]);

  MSI_Debug('MSI_PlayerSetup', 'Current ' + Capitalize(skillsArr[currSkill])
            + ' level is ' + IntToStr(currLevel) + '.', debug_Functions);

  case PlayerSkills[CurrentPlayer][CurrentSkill] of
    SKILL_WOODCUTTING, SKILL_MINING:
      case (currLevel) of
        REQ_RUNE..REQ_MAX_LEVEL: Result := HATCHET_RUNE;
        REQ_ADAMANT..REQ_RUNE: Result := HATCHET_ADAMANT;
        REQ_MITHRIL..REQ_ADAMANT: Result := HATCHET_MITHRIL;
        REQ_STEEL..REQ_MITHRIL: Result := HATCHET_STEEL;

        else
          Result := HATCHET_IRON;
      end;
  end;
end;

{******************************************************************************}
{ function MSI_WorstTool: Integer;                                             }
{ By: Coh3n                                                                    }
{ Rev: 55                                                                      }
{ Date: 23 Feb 2010                                                            }
{ Description: Determines the worst tool for the job at hand.                  }
{******************************************************************************}
function MSI_WorstTool: Integer;
begin
  if (not LoggedIn) then
    Exit;
    
  case (PlayerSkills[CurrentPlayer][CurrentSkill]) of
    SKILL_WOODCUTTING:
      Result := HATCHET_BRONZE;
  end;
end;

{******************************************************************************}
{ function MSI_SetupPlayer: Boolean;                                           }
{ By: Coh3n                                                                    }
{ Rev: 54                                                                      }
{ Date: 21 Dec 09                                                              }
{ Description: Sets up the player for autoing.                                 }
{******************************************************************************}
function MSI_SetupPlayer: Boolean;
var
  bestTool, worstTool, x, y, i, j , k: Integer;
  bankCheck: Boolean;
  gameTabs: TIntegerArray;
begin
  if (not LoggedIn) then
    LoginPlayer;

  SetAngle(True);
  SetRun(True);

  { Starts by looking for the best tool for that player's skill level, and
    moves down from there. }
  bestTool := MSI_BestTool;
  worstTool := MSI_WorstTool;
  gameTabs := [tab_Equip, tab_Inv];
  
  for j := 0 to High(gameTabs) do
    for i := bestTool downto worstTool do
    begin
      Result := MSI_FindTool(i, gameTabs[j], x, y);
      if (Result) then
        Exit;
    end;

  { If the required tool isn't found, then will open the bank and attempt to
    withdraw the proper tool. }
  if (not Result) then
  begin
    case (Players[CurrentPlayer].Integers[P_LOC]) of
      LOC_VE_BANK:
        bankCheck := MSI_OpenBank(OBJ_BANK_VE, Players[CurrentPlayer].Pin);

      else
        MSI_Debug('MSI_SetupPlayer', 'Invalid Player.Integers[P_LOC].',
                  debug_Functions);
    end;

    if bankCheck then
      for k := bestTool downto 0 do
      begin
        Result := MSI_Withdraw([k], [1]);
        if (Result) then
          Break
        else

        begin
          CloseBank;
          MSI_Debug('MSI_PlayerSetup', 'Couldn''t Withdraw Tool.',
                    debug_Functions);
        end;
      end
    else
      MSI_Debug('MSI_SetupPlayer', 'Unable to Open Bank.', debug_Functions);
  end;
end;

{******************************************************************************}
{ function MSI_GetObjectList: TIntegerArray;                                   }
{ By: Coh3n                                                                    }
{ Rev: 5                                                                       }
{ Date: 24 Feb 2010                                                            }
{ Description: Converts the variant array to an integer array                  }
{******************************************************************************}
function MSI_GetObjectList(whichPlayer, whichSkill: Integer): TIntegerArray;
var
  i: Integer;
  tempStr: String;
  objects: TVariantArray;
begin
  objects := PlayerObjects[whichPlayer][whichSkill];
  SetLength(Result, Length(objects));

  try
    for i := 0 to High(objects) do
    begin
      tempStr := IntToStr(objects[i]);
      Result[i] := StrToInt(tempStr);
    end;
  except
    MSI_Debug('MSI_GetObjectList', 'Invalid object type in DeclarePlayers!', debug_Functions);
    Exit;
  end;
end;

{******************************************************************************}
{ function MSI_GetItemList: TIntegerArray;                                     }
{ By: Coh3n                                                                    }
{ Rev: 5                                                                       }
{ Date: 24 Feb 2010                                                            }
{ Description: Gets the materials required depending on the object autoed      }
{******************************************************************************}
function MSI_GetItemList(whichPlayer, whichSkill: Integer): TIntegerArray;
var
  i: Integer;
  objects: TIntegerArray;
begin
  objects := MSI_GetObjectList(whichPlayer, whichSkill);
  SetLength(Result, Length(objects));

  for i := 0 to High(objects) do
    case objects[i] of
      OBJ_TREE: Result[i] := LOGS_NORMAL;
      OBJ_OAK:  Result[i] := LOGS_OAK;
    end;
end;

{******************************************************************************}
{ function MSI_GetExpList: TIntegerArray;                                      }
{ By: Coh3n                                                                    }
{ Rev: 5                                                                       }
{ Date: 24 Feb 2010                                                            }
{ Description: Gets the experience gained by obtaining items in the item list  }
{******************************************************************************}
function MSI_GetExpList: TExtendedArray;
var
  i: Integer;
  objects: TIntegerArray;
  msObjs: TMSObjectArray;
begin
  objects := MSI_GetObjectList(CurrentPlayer, CurrentSkill);
  SetLength(Result, Length(objects));
  
  msObjs := MSI_GetObjects(objects);
  for i := 0 to High(objects) do
    Result[i] := msObjs[i].Exp;
end;

{******************************************************************************}
{ function MSI_WalkToLoc: Boolean;                                             }
{ By: The MSI Team                                                             }
{ Rev: 5                                                                       }
{ Date: 23 Feb 2010                                                            }
{ Description: Walks to the proper location depending on skill/location        }
{******************************************************************************}
function MSI_WalkToLoc: Boolean;
var
  i: Integer;
begin
  if (not LoggedIn) then
    Exit;
    
  case PlayerSkills[CurrentPlayer][CurrentSkill] of
    SKILL_WOODCUTTING:
      case Players[CurrentPlayer].Integers[P_LOC] of
        LOC_VE_BANK:
          begin
            RoadColor := FindNewVarrockRoadColor;
            for i := WALK_WC_VE_TREE_1 to WALK_WC_VE_TREE_3 do
              CreateWalkIndex(i);

            Result := CreateWalkIndex(WALK_WC_VE_TREE_4);
            if Result then
              Players[CurrentPlayer].Integers[P_LOC] := LOC_VE_TREES;
          end;
          
        LOC_VE_TREES: Result := True;

        else
          MSI_Debug('MSI_WalkToLoc', 'Invalid location for woodcutting skill.', debug_Functions);
      end;
    else
      MSI_Debug('MSI_WalkToLoc', 'Invalid player skill!', debug_Functions);
  end;
end;

{******************************************************************************}
{ function MSI_WalkToBank: Boolean;                                            }
{ By: The MSI Team                                                             }
{ Rev: 5                                                                       }
{ Date: 23 Feb 2010                                                            }
{ Description: Walks to the bank depending on skill/location                   }
{******************************************************************************}
function MSI_WalkToBank: Boolean;
var
  i: Integer;
begin
  if (not InvFull) or (not LoggedIn) then
    Exit;

  case PlayerSkills[CurrentPlayer][CurrentSkill] of
    SKILL_WOODCUTTING:
      case Players[CurrentPlayer].Integers[P_LOC] of
        LOC_VE_TREES:
          begin
            RoadColor := FindNewVarrockRoadColor;
            for i := WALK_WC_VE_BANK_1 to WALK_WC_VE_BANK_3 do
              CreateWalkIndex(i);

            Result := CreateWalkIndex(WALK_WC_VE_BANK_4);
            if Result then
              Players[CurrentPlayer].Integers[P_LOC] := LOC_VE_BANK;
          end;
          
        LOC_VE_BANK: Result := True;

        else
          MSI_Debug('MSI_WalkToBank', 'Invalid location for woodcutting skill.', debug_Functions);
      end;
    else
      MSI_Debug('MSI_WalkToBank', 'Invalid player skill!', debug_Functions);
  end;
end;

{******************************************************************************}
{ function MSI_DoSkill: Boolean;                                               }
{ By: The MSI Team                                                             }
{ Rev: 5                                                                       }
{ Date: 23 Feb 2010                                                            }
{ Description: Performs the specified skill                                    }
{******************************************************************************}
function MSI_DoSkill: Boolean;
var
  objectTypes: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;
    
  objectTypes := MSI_GetObjectList(CurrentPlayer, CurrentSkill);
  
  case PlayerSkills[CurrentPlayer][CurrentSkill] of
    SKILL_WOODCUTTING:
      Result := MSI_ChopInvFull(objectTypes);
      
    else
      MSI_Debug('MSI_WalkToBank', 'Invalid player skill!', debug_Functions);
  end;
end;

{******************************************************************************}
{ procedure MSI_CountItems;                                                    }
{ By: Coh3n                                                                    }
{ Rev: 5                                                                       }
{ Date: 24 Feb 2010                                                            }
{ Description: Counts the materials and calculates the experience gained       }
{              from items in the inventory                                     }
{******************************************************************************}
procedure MSI_CountItems;
var
  itemCount, expCount, i: Integer;
  items: TIntegerArray;
  exps: TExtendedArray;
begin
  if (not LoggedIn) then
    Exit;
    
  items := MSI_GetItemList(CurrentPlayer, CurrentSkill);
  exps := MSI_GetExpList;
  
  for i := 0 to High(items) do
  begin
    MSI_GetItem(items[i]);
    itemCount := CountItems('dtm', MSI_Item[items[i]].DTM, []);
    expCount := Round(exps[i] * itemCount);
    
    AddToProggy(i, itemCount, ADD_ITEMS); //Adds amount of item
    AddToProggy(-1, expCount, ADD_EXP);   //Adds exp to skill
    
    MSI_Debug('MSI_CountItems', 'Found ' + IntToStr(itemCount) + ' of item '
              + MSI_Item[items[i]].Name, DEBUG_FUNCTIONS);
  end;
end;

{******************************************************************************}
{ function MSI_BankMaterials: Boolean;                                         }
{ By: The MSI Team                                                             }
{ Rev: 5                                                                       }
{ Date: 23 Feb 2010                                                            }
{ Description: Banks the specified materials                                   }
{******************************************************************************}
function MSI_BankMaterials: Boolean;
begin
  if (not LoggedIn) then
    Exit;
    
  case PlayerSkills[CurrentPlayer][CurrentSkill] of
    SKILL_WOODCUTTING:
      case Players[CurrentPlayer].Integers[P_LOC] of
        LOC_VE_BANK:
          begin
            MSI_CountItems;
            if (not MSI_OpenBank(OBJ_BANK_VE, Players[CurrentPlayer].Pin)) then
              ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to open bank: OBJ_BANK_VE';
              
            Result := MSI_Deposit([LOGS_NORMAL, LOGS_OAK], [28, 28]);
            if (not Result) then
              ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to deposit items'
            else
              AddToProggy(-1, -1, ADD_LOADS);
          end;

        else
          MSI_Debug('MSI_BankMaterials', 'Invalid location for woodcutting skill.', debug_Functions);
      end;
    else
      MSI_Debug('MSI_BankMaterials', 'Invalid player skill!', debug_Functions);
  end;
end;

{******************************************************************************}
{ procedure MSI_HandleBreaking;                                                }
{ By: MSI_HandleBreaking                                                       }
{ Description: Simple procedure for breaking                                   }
{******************************************************************************}
procedure MSI_HandleBreaking;
begin
  if (not LoggedIn) then
    Exit;
    
  if (BankScreen) then
    CloseBank;
    
  if (HowManyPlayers > 1) then
  begin
    MSI_Debug('MSI_HandleBreaking', 'Taking a short break', Debug_PlayerActions);
    ExitToLobby;
    Wait((BreakTime * 60000) + RandomRange(-300000, 300000));
    MSI_Debug('MSI_MainLoop', 'Break over, continuing to play', Debug_PlayerActions);
    if (AtLobbyScreen) then
      MouseBox(80, 450, 560, 470, 1);
  end else
  begin
    MSI_Debug('MSI_MainLoop', 'Switching players', Debug_PlayerActions);
    NextPlayer(True);
  end;
end;

{******************************************************************************}
{ procedure MSI_MainLoop;                                                      }
{ By: The MSI Team                                                             }
{ Date: 23 Feb 2010                                                            }
{ Description: The MainLoop - performs all actions of the script               }
{******************************************************************************}
procedure MSI_MainLoop;
var
  loadTime, totalLoads, i: Integer;
begin
  repeat
    if (AllPlayersInactive) then
    begin
      MSI_Debug('MSI_MainLoop', 'All players are now inactive, terminating script...', Debug_PlayerActions);
      ProgressReport;
      TerminateScript;
    end;
    
    if (not MSI_SetupPlayer) then
    begin
      MSI_Debug('MSI_MainLoop', 'Failed to setup player!', Debug_PlayerActions);
      Players[CurrentPlayer].Active := False;
      ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to setup player';
      ProgressReport;
      NextPlayer(False);
      Continue;
    end;
    
    repeat
      MarkTime(loadTime);
    
      if (not MSI_WalkToLoc) then
      begin
        MSI_Debug('MSI_MainLoop', 'Failed to walk to location!', Debug_PlayerActions);
        Players[CurrentPlayer].Active := False;
        ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to walk to location';
        Players[CurrentPlayer].Integers[P_LOC] := LOC_LOST;
        ProgressReport;
        NextPlayer(False);
        Break;
      end;

      if (not MSI_DoSkill) then
      begin
        MSI_Debug('MSI_MainLoop', 'Failed to perform skill!', Debug_PlayerActions);
        Players[CurrentPlayer].Active := False;
        ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to perform skill: ' + IntToStr(CurrentSkill);
        ProgressReport;
        NextPlayer(False);
        Break;
      end;

      if (not MSI_WalkToBank) then
      begin
        MSI_Debug('MSI_MainLoop', 'Failed to walk to bank!', Debug_PlayerActions);
        Players[CurrentPlayer].Active := False;
        ProgressReportArray[CurrentPlayer].FalseReason := 'Failed to walk to bank';
        Players[CurrentPlayer].Integers[P_LOC] := LOC_LOST;
        ProgressReport;
        NextPlayer(False);
        Break;
      end;

      if (not MSI_BankMaterials) then
      begin
        MSI_Debug('MSI_MainLoop', 'Failed to bank materials!', Debug_PlayerActions);
        Players[CurrentPlayer].Active := False;
        ProgressReport;
        NextPlayer(False);
        Break;
      end;

      ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].SkillTime :=
      ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].SkillTime + TimeFromMark(loadTime);
      
      ProgressReport;
      
      for i := 0 to High(PlayerSkills[CurrentPlayer]) do
        IncEx(totalLoads, ProgressReportArray[CurrentPlayer].SkillInfo[CurrentSkill].TotalLoads);
        
      Writeln('Total Loads: ' + IntToStr(totalLoads)); // Just for testing
      if (totalLoads >= BreakAfter) then
        MSI_HandleBreaking;
        
    until(not Players[CurrentPlayer].Active);
  until(AllPlayersInactive);
end;