{==============================================================================\
|                         MSI Group Scripting Include                          |
|                             Walking_Color.scar                               |
|==============================================================================|
| For all the walking functions that are color based.                          |
|                                                                              |
 \_____________________________________________________________________________}

{ const Varrock East Woodcutting
  Description: Constants used for the walking to and from the trees at the
               Varrock east bank. }
const
  WALK_WC_VE_TREE_1 = 0; // rock
  WALK_WC_VE_TREE_2 = 1; // road
  WALK_WC_VE_TREE_3 = 2; // path
  WALK_WC_VE_TREE_4 = 3; // final

  WALK_WC_VE_BANK_1 = 4; // rock
  WALK_WC_VE_BANK_2 = 5; // path
  WALK_WC_VE_BANK_3 = 6; // road
  WALK_WC_VE_BANK_4 = 7; // final

{ const AutoColor
  Description: Constants used for the walking autocoloring. }
const
  SRLAC_RoadColour = 6579821;
  SRLAC_VarrockRoadColour = 8291719;
  SRLAC_FallyRoadColour = 7831173;
  SRLAC_LumbyRoadColour = 8225677;
  SRLAC_DirtRoadColour = 1853272;
  SRLAC_WaterColour = 10850700;
  SRLAC_RockColour = 5789528;
  SRLAC_SandColour = 0;
  SRLAC_BankerColour = 1179390;
  SRLAC_TreeColour = 1532978;

Procedure SortColors(var Colors: tIntegerArray; col: Integer);
var
  tempB: tIntegerArray;
  Tol: ShortInt;
  I: Integer;
  timer, L: LongInt;
begin
  timer := getsystemtime;
  tempB := Colors;
  SetArrayLength(Colors, 0);
  Tol := 0;
  while Length(Colors) < (Length(tempB)/2 or 5) do
  begin
    if Getsystemtime-timer > 100 then Break;
    for i := 0 to High(tempB) do
    begin
      if SimilarColors(tempB[i], col, Tol) then
      begin
        L := GetArrayLength(Colors);
        SetArrayLength(Colors, L+1);
        Colors[L] := tempB[i];
      end;
      if Tol > 10 then Break;
      Inc(Tol);
    end;
  end;
end;

{******************************************************************************}
{ Function FindMMLocation(Var X, Y: Integer; Location: TMMLocation): Boolean;  }
{ By: marpis                                                                   }
{ Rev: 35                                                                      }
{ Date: 30 Nov 09                                                              }
{ Description: Finds a location in minimap. First tries to find DTM, then      }
{              colors, and if still not found it will find it by symbol        }
{******************************************************************************}
Function MSI_FindMMLocation(Var X, Y: Integer; Location: TMMLocation): Boolean;
Var
  SA, EA, tmp_Ang: Extended;
  N, I, II, III, H, HH, Score, Step: Integer;
  ATPA: T2DPointArray;
  tmp_TPA: TPointArray;
  X1, Y1, X2, Y2: Integer;
Begin
  If (Not LoggedIn) Then Exit;

  X := -1;
  Y := -1;
  Step := (Location.W * Location.H) / 10;

  { DTM Search }
  If (Location.DTM > -1) Then
    While (N < 10) Do
    Begin
      If FindDTMRotated(Location.DTM, X, Y, MMX1, MMY1, MMX2, MMY2, SA, EA, 0.02, tmp_Ang) Then
      Begin
        Result := True;
        Exit;
      End;
      Inc(N);
      SA := SA - (N * 0.02);
      EA := EA + (N * 0.02);
    End;

  { Color search }
  If (Length(Location.Colors) = 0) Then
    Exit;

  H := High(Location.Colors);
  SetLength(ATPA, H + 1);

  For I := 0 To H Do
  Begin
    FindColorsSpiralTolerance(MMCX, MMCY, ATPA[I], Location.Colors[I], MMX1, MMY1, MMX2, MMY2, Location.Tolerances[I]);
    FilterPointsPie(ATPA[I], 0.0, 360.0, 0.0, 76.0, MMCX, MMCY);
  End;

  { Go through every TPA that contains one color. }
  For I := 0 To H Do
  Begin
    HH := High(ATPA[I]);

    { Go through every 10th point in ATPA[I] to avoid lag. }
    For II := 0 To HH Do
    Begin
      If ((II Mod Step) <> 0) Then
        Continue;

      Score := 0;

      X1 := ATPA[I][II].X - (Location.W / 2);
      Y1 := ATPA[I][II].Y - (Location.H / 2);
      X2 := ATPA[I][II].X + (Location.W / 2);
      Y2 := ATPA[I][II].Y + (Location.H / 2);

      { Go through every TPA again, calculating surrounding color counts. }
      For III := 0 To H Do
      Begin
        tmp_TPA := MSI_ReturnPointsInBox(ATPA[III], IntToBox(X1, Y1, X2, Y2));
        If (Length(tmp_TPA) >= Location.Counts[III]) Then
          Inc(Score);
      End;

      { If there are enough points of all colors, the location has been found. }
      If (Score = H) Then
      Begin
        Result := True;
        X := (X1 + X2) shr 1;
        Y := (Y1 + Y2) shr 1;
        Exit;
      End;

    End;
  End;

  { Symbol Search }
  If (Location.Symbol <> '') Then
    If FindSymbol(X, Y, Location.Symbol) Then
    Begin
      Result := True;
      Exit;
    End;
End;

Function AutoColorMM(const color: Integer): Integer;
var
  TPA: tPointArray;
  List: tIntegerArray;
  I: Integer;
begin
  for i := 0 to 20 do
  begin
    FindColorsTolerance(TPA, color, MMx1, MMy1, MMx2, MMy2, 5+i);
    if Length(TPA) > 0 then Break;
  end;
  if Length(TPA) <= 0 then Exit;
  List := getColors(TPA);
  sortColors(List, color);
  if Length(List) <= 0 then Exit;
  result := List[0];
end;

Function FindNewVarrockRoadColor: Integer;
begin
  Result := AutoColorMM(SRLAC_VarrockRoadColour);
end;

Function CreateWalkTPA(x, y, color, width, height, tolerance: Integer): TpointArray;
var
  TPA: tPointArray;
  aTPA: t2DPointArray;
  i: Integer;
  L, P: Integer;
begin
  FindColorsSpiralTolerance(x, y, TPA, color, MMx1, MMy1, MMx2, MMy2, tolerance);
  aTPA := TPAtoATPAEx(TPA, width, height);
  for i := 0 to High(aTPA) do
  begin
    if Length(aTPA) > 5 then
    begin
      l := getarraylength(Result);
      SetArrayLength(Result, l+1);
      Result[l] := MiddleTpa(aTPA[i]);
    end;
  end;
  if Length(result) = 0 then Exit;
  for i := 0 to High(Result) do
    if rs_OnMiniMap(result[i].x, result[i].y) then Inc(p);
  if p = 0 then SetArrayLength(Result, 0);
end;

Function walkTPApoint(TPA: tPointArray; sortP: tPoint; flagDist: shortInt): Boolean;
var
  i: Integer;
  t: LongInt;
begin
  t := getSystemTime;
  if Length(TPA) <= 0 then Exit;
  SortTPAFrom(TPA, sortP);
  for i := 0 to High(TPA) do
  begin
    if rs_OnMiniMap(TPA[i].x, TPA[i].y) then
    begin
      Mouse(TPA[i].x, TPA[i].y, random(8), random(8), true);
      while not FlagPresent do
      begin
        wait(250+randomRange(150, 350));
        if getSystemTime-t > randomRange(2500, 3750) then
          continue;
      end;
      FFlag(flagDist);
      Result := True;
      Exit;
    end;
  end;
end;

Function CreateColorBox(Color: Integer): TBox;
var
  TPA: tPointArray;
begin
  FindColors(TPA, Color, MMx1, MMy1, MMx2, MMy2);
  if Length(TPA) <= 0 then Exit;
  Result := GetTPABounds(TPA);
end;

Function FindColorInBox(Color: Integer; Box: TBox): Boolean;
var
  TPA: tPointArray;
  i: Integer;
begin
  FindColorsTolerance(TPA, Color, Box.x1-5, Box.y1-5, Box.x2+5, Box.y2+5, 15);
  if Length(TPA) <= 0 then Exit;
  SortTPAFrom(TPA, Point(687, 50));
  for i := 0 to High(TPA) do
  begin
    if not rs_OnMiniMap(TPA[i].x, TPA[i].y) then continue;
    Mouse(TPA[i].x, TPA[i].y, 5, 5, True);
    Wait(750+random(450));
    if FlagPresent then
    begin
      FFlag(10);
      Result := True;
      Exit;
    end;
  end;
end;

Function CreateWalkIndex(index: Integer): Boolean;
var
  i: Integer;
  aTPA: t2DPointArray;
  TPA: tPointArray;
  p: tPoint;
  RockColor, TreeColor, BC: Integer;
  t: LongInt;
begin
  case index of
    WALK_WC_VE_TREE_1:
      begin
        if countColor(RoadColor, MMx1, MMy1, MMx2, MMy2) <= 5 then RoadColor := FindNewVarrockRoadColor;
        if FindColorInBox(RoadColor, CreateColorBox(FindRockColor)) then
        begin
          Result := True;
          Exit;
        end;
        TPA := CreateWalkTPA(MMx2, MMy1, RoadColor, 2, 2, 8);
        if Length(TPA) <= 0 then Exit;
        Result := walkTPApoint(TPA, Point(MMx2-randomRange(5, 15), MMy1), random(10));
        Exit;
      end;
    
    WALK_WC_VE_TREE_2:
      begin
        TPA := CreateWalkTPA(MMx2, MMcy, RoadColor, 2, 2, 8);
        if Length(TPA) <= 0 then Exit;
        Result := walkTPAPoint(TPA, Point(MMx2, MMcy), random(15));
        if Result then Exit;
        if not LinearWalkTolerance(RoadColor, randomRange(80, 90), randomRange(59, 68), random(8), random(8), 8) then
          if not RadialWalkTolerance(RoadColor, 80, 90, randomRange(55, 69), random(8), random(8), 10) then
        begin
          WriteLn('Walking Failed Here. Submit a Fix.');
          logOut;
          NextPlayer(False);
          Exit;
        end;
        Result := True;
        Exit;
      end;
      
    WALK_WC_VE_TREE_3:
      begin
        RockColor := AutoColorMM(SRLAC_RockColour);
        TPA := CreateWalkTPA(MMcx, MMy1, RockColor, 2, 2, 8);
        if length(TPA) <= 0 then Exit;
        for i := 0 to High(TPA) do
        begin
          if TPA[i].y > MMcy then continue;
          Mouse(TPA[i].x, TPA[i].y, 5, 5, true);
          t := getSystemTime;
          while not flagPresent() do
          begin
            if getSystemTime-t > randomRange(2000, 2500) then
              Exit;
            wait(250+random(500));
          end;
          FFlag(random(8));
          Result := True;
          Exit;
        end;
      end;
      
    WALK_WC_VE_TREE_4:
      begin
        TreeColor := AutoColorMM(SRLAC_TreeColour);
        writeLn('Tree AutoColor = '+IntToStr(TreeColor));
        FindColorsTolerance(TPA, TreeColor, MMx1, MMy1, MMx2, MMy2, 8);
        if Length(TPA) <= 0 then Exit;
        aTPA := SplitTPAEx(TPA, 10, 10);
        if Length(aTPA) <= 0 then Exit;
        SortATPASize(aTPA, true);
        p := MiddleTPA(aTPA[0]);
        if (p.x < MMcx+20) and (p.y < MMcy) then
        begin
          Mouse(p.x, p.y, 5, 5, true);
          Flag();
          Result := True;
          Exit;
        end;
      end;
      
    WALK_WC_VE_BANK_1:
      begin
        RockColor := AutoColorMM(SRLAC_RockColour);
        TPA := CreateWalkTPA(MMcx, MMy2, RockColor, 2, 2, randomRange(5, 10));
        if Length(TPA) <= 0 then Exit;
        SortTPAFrom(TPA, point(700, 150));
        for i := 0 to High(TPA) do
        begin
          if (TPA[i].y < MMcy-10) then continue;
          Mouse(TPA[i].x-5, TPA[i].y, Random(8), Random(8), true);
          t := getSystemTime;
          while not flagPresent() do
          begin
            if getSystemTime-t > randomRange(2000, 2500) then
              Exit;
            wait(250+random(500));
          end;
          FFlag(RandomRange(5, 10));
          Result := True;
          Exit;
        end;
      end;
      
    WALK_WC_VE_BANK_2:
      begin
        RoadColor := FindNewVarrockRoadColor();
        FindColorsTolerance(TPA, RoadColor, MMx1, MMCy, MMCx, MMy2, 4);
        if Length(TPA) <= 0 then
          Exit;
        SortTPAFrom(TPA, Point(MMCx, MMCy));
        
        for t := 0 to 4 do
        begin
          i := Length(TPA) - RandomRange(1, 4);
          try
            if rs_OnMiniMap(TPA[i].x, TPA[i].y) then
              BC := 1;
          except
            Continue;
          end;
          if BC = 1 then
            Break;
        end;
        
        if t = 4 then
        begin
          MSI_Debug('CreatWalkIndex(WALK_WC_VE_BANK_2)', 'Failed to find road on minimap', Debug_Functions);
          Exit;
        end;
        
        Mouse(TPA[i].x, TPA[i].y, 0, 0, True);
        FFlag(5);
        Result := True;
        Exit;
      end;
      
    WALK_WC_VE_BANK_3:
      begin
        TPA := CreateWalkTPA(MMx1, MMcy, RoadColor, 3, 3, 8);
        if Length(TPA) <= 0 then
          Exit;
        SortTPAFrom(TPA, point(MMx1-10, MMcy));
        for i := 0 to High(TPA) do
        begin
          if not RS_onMinimap(TPA[i].x, TPA[i].y) then Continue;
          Mouse(TPA[i].x, TPA[i].y, 5, 5, true);
           t := getSystemTime;
          while not flagPresent() do
          begin
            if getSystemTime-t > randomRange(2000, 2500) then
              Exit;
            wait(250+random(500));
          end;
          FFlag(RandomRange(3, 7));
          Result := True;
          Exit;
        end;
      end;
      
    WALK_WC_VE_BANK_4:
      begin
        for i := 0 to 2 do
        begin
          BC := AutoColorMM(SRLAC_BankerColour);
          FindColorsTolerance(TPA, BC, MMx1, MMCy + 18, MMCx, MMy2, 1);
          if Length(TPA) > 5 then
            Break;
          if i = 2 then
          begin
            MSI_Debug('CreateWalkIndex(WALK_BANK_Final);', 'Failed to find bankers on MiniMap.', Debug_Functions);
            Exit;
          end;
        end;
        
        SortTPAFrom(TPA, Point(MMCx, MMCy));
        for i := 0 to High(TPA) do
        begin
          t := Random(High(TPA));
          if rs_OnMiniMap(TPA[t].x, TPA[t].y) then
            Break;
          if i = High(TPA) then
          begin
            MSI_Debug('CreateWalkIndex(WALK_BANK_Final);', 'Points not on MiniMap!', Debug_Functions);
            Exit;
          end;
        end;
        
        Mouse(TPA[t].x, TPA[t].y - RandomRange(3, 7), 3, 3, True);
        t := getSystemTime;
        while not flagPresent() do
        begin
          if getSystemTime-t > randomRange(2000, 2500) then
            Exit;
          wait(250+random(500));
        end;
        
        FFlag(3);
        Result := True;
      end;
  end;
end;

